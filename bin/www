#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nft-colligence-admin:server');
// var https = require('https');
var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// ssl options
// var options = {
//     key: fs.readFileSync('/etc/letsencrypt/live/nfttalken.chainos.asia/privkey.pem'),
//     cert: fs.readFileSync('/etc/letsencrypt/live/nfttalken.chainos.asia/fullchain.pem')
// };

// var server = https.createServer(options, app);
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port , console.log('Server is listening on: ' + port));
server.on('error', onError);
server.on('listening', onListening);
server.on('request', function(req, res) {
    console.log("request1::::::::::",req.url);
    // see all incoming requests here
    if (req.url === '/backend') {
        req.url = req.url.replace('/backend', '')
        if (req.url === '') req.url = '/';
        console.log("request2::::::::::",req.url);
        // process /hello route here
    }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
